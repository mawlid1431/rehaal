-- ============================================
-- COMPLETE ADMIN SETUP - RUN THIS IN SUPABASE
-- ============================================

-- Step 1: Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Step 2: Drop existing tables if they exist (clean start)
DROP TABLE IF EXISTS password_reset_tokens CASCADE;
DROP TABLE IF EXISTS admin_users CASCADE;

-- Step 3: Create admin_users table
CREATE TABLE admin_users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  username TEXT UNIQUE NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  full_name TEXT NOT NULL,
  role TEXT DEFAULT 'admin' CHECK (role IN ('super_admin', 'admin', 'editor')),
  is_active BOOLEAN DEFAULT true,
  last_login TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Step 4: Create indexes
CREATE INDEX idx_admin_users_email ON admin_users(email);
CREATE INDEX idx_admin_users_username ON admin_users(username);
CREATE INDEX idx_admin_users_active ON admin_users(is_active);

-- Step 5: Create update trigger function (if not exists)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Step 6: Add trigger
CREATE TRIGGER update_admin_users_updated_at 
  BEFORE UPDATE ON admin_users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Step 7: Enable RLS
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;

-- Step 8: Create RLS Policies
CREATE POLICY "admin_users_select_policy" ON admin_users FOR SELECT USING (true);
CREATE POLICY "admin_users_insert_policy" ON admin_users FOR INSERT WITH CHECK (true);
CREATE POLICY "admin_users_update_policy" ON admin_users FOR UPDATE USING (true);
CREATE POLICY "admin_users_delete_policy" ON admin_users FOR DELETE USING (true);

-- Step 9: Create password reset tokens table
CREATE TABLE password_reset_tokens (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES admin_users(id) ON DELETE CASCADE,
  token TEXT UNIQUE NOT NULL,
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  used BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX idx_password_reset_tokens_user_id ON password_reset_tokens(user_id);

ALTER TABLE password_reset_tokens ENABLE ROW LEVEL SECURITY;
CREATE POLICY "password_reset_tokens_select_policy" ON password_reset_tokens FOR SELECT USING (true);
CREATE POLICY "password_reset_tokens_insert_policy" ON password_reset_tokens FOR INSERT WITH CHECK (true);
CREATE POLICY "password_reset_tokens_update_policy" ON password_reset_tokens FOR UPDATE USING (true);
CREATE POLICY "password_reset_tokens_delete_policy" ON password_reset_tokens FOR DELETE USING (true);

-- Step 10: Insert main admin user
-- IMPORTANT: Open generate-password-hash.html in browser first to get the correct hash!
-- Then replace the hash below with the one generated

-- For password: Mowlid@2025?!
-- The hash will be generated by the HTML tool

INSERT INTO admin_users (username, email, password_hash, full_name, role, is_active) 
VALUES (
  'Rehaal',
  'admin@rehaal.com',
  'REPLACE_WITH_HASH_FROM_HTML_TOOL',
  'Rehaal Administrator',
  'super_admin',
  true
);

-- Step 11: Verify everything
SELECT 'Setup Complete!' as status;
SELECT 'Tables created:' as info;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' AND table_name IN ('admin_users', 'password_reset_tokens');

SELECT 'Admin user created:' as info;
SELECT id, username, email, full_name, role, is_active FROM admin_users;

SELECT '⚠️ IMPORTANT: Replace REPLACE_WITH_HASH_FROM_HTML_TOOL with actual hash from generate-password-hash.html' as warning;
